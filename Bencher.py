import csv, os
#The Bencher class extracts the data from the bench file generated by PresentMon, better naming for this class and all of its functions comming soon(tm)
class Bencher():
    def __init__(self, file, workdir):
        self.workingdirectory = workdir
        self.file = file
        self.open_file = None
        self.fps = ["FPS"]
        self.frametime = ["frametime"]
        self.minimum = ["minimum"]
        self.maximum = ["maximum"]
        self.average = ["average"]
    #function to open a file  
    def opener(self):
        self.open_file = open(self.file,"r")
    #function to extract the data from the bench file and calculate the frames per second
    def calc_frametime_fps(self):
        self.open_file.readline()
        for line in self.open_file:
            blocks = line.split(",")
            frametime = float(blocks[10])
            self.frametime.append(frametime)
            fps = 1000 / frametime
            self.fps.append(fps)
    #function to calculate the minimum fps
    def get_min(self):
        self.minimum.append(min(self.fps))
        print self.minimum 
        return self.minimum
    #function to calculate the maximum fps
    def get_max(self):
        fps_values = self.fps
        fps_values.remove("FPS")
        self.maximum.append(max(self.fps))
        print self.maximum
        return self.maximum
    #function to calculate the average fps
    def get_avg(self):
        frametime_times = self.frametime
        frametime_times.remove("frametime")
        avg = 1000 / (sum(frametime_times) / len(frametime_times))
        self.average.append(avg)
        print self.average
        return self.average
    #function to get the frametime
    def get_frametime(self):
        return self.frametime
    #I think you can guess this one now
    def get_fps(self):
        return self.fps

    
            
            
            

'''        
# Initialise lists and variables
PresentMs = []
PresentFPS = []
PresentTime = []
# Get filename and load







# Load file
pmfile = open(pmfilename,"r")
line = pmfile.readline()
# Loop until the end of the file
for line in pmfile:
   # Create PresentMs list data
   blocks = line.split(",")
   PresentTime.append(blocks[9])
   PresentTime = map(float, PresentTime)
   PresentMs.append(blocks[10])
   PresentMs = map(float, PresentMs)
   # Create PresentFPS array data
for item in PresentMs:
    fps = 1000/float(item)
    PresentFPS.append(fps)
avgfps = len(PresentMs)/round(PresentTime[-1], 0)
minfps = min(PresentFPS)
maxfps = max(PresentFPS)
print "Minimum FPS: ", minfps
print "Maximum FPS: ", maxfps
print "Average FPS: ", avgfps
minmaxavg = "Minimum " + str(minfps) + "\nMaximum " + str(maxfps) + "\nAverage " + str(avgfps) + "\n"
minmaxavgfilename = "MinMaxAvg.txt"
with open("MinMaxAvg.txt", "a") as text_file:
    text_file.write(minmaxavg + "\n")
print "File saved as " + minmaxavgfilename   
# Save file as .csv
outputfilename = raw_input("Enter Name of Output File: ")
if not outputfilename.endswith(".csv"):
   outputfilename = outputfilename+ ".csv"
zip(PresentMs, PresentFPS)
with open(outputfilename, "w") as f:
   writer = csv.writer(f, delimiter=',', lineterminator='\n')
   writer.writerows(zip(PresentTime, PresentMs, PresentFPS))
print "File saved as " + outputfilename
'''
